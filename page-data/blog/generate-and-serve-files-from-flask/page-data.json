{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/generate-and-serve-files-from-flask","webpackCompilationHash":"7d165349113f1c74c978","result":{"data":{"markdownRemark":{"html":"<p>Flask is one of the most used python frameworks for web development. Its\nsimplicity and extensibility makes it convenient for both small and large\napplications alike.</p>\n<p>In this blog we are going to create a simple flask web application that will\ngenerate and serve files without storing them in the server.</p>\n<blockquote>\n<p>Note: For flask and python installation visit\n<a href=\"https://flask.palletsprojects.com/en/1.1.x/\">flask documentation</a></p>\n</blockquote>\n<p>Let's create a flask application with a basic route.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello Flask!\"</span></code></pre></div>\n<p>and voila! We have our server up and running with only 5 lines of code.</p>\n<p>Now we need to create a route which will accept a file name as parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/file/&lt;file_name>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_file</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> file_name</code></pre></div>\n<p>For our use case we need to generate a csv file using fake data.We need to\ninstall <a href=\"https://github.com/joke2k/faker\">faker</a> to generate fake data such\nas name, address, birthdate etc. Also we are using\n<a href=\"https://github.com/pandas-dev/pandas\">pandas</a> to generate dataframes that\ncan be used to create both csv and spreadsheets.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python3 -m pip <span class=\"token function\">install</span> faker pandas</code></pre></div>\n<p>Let's add functions that will generate csv files using the fake data we get\nfrom Faker.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">generate_fake_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fake_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fake<span class=\"token punctuation\">.</span>simple_profile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>fake_data<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_csv_file</span><span class=\"token punctuation\">(</span>file_df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Create an o/p buffer</span>\n    file_buffer <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Write the dataframe to the buffer</span>\n    file_df<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span>file_buffer<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Seek to the beginning of the stream</span>\n    file_buffer<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> file_buffer</code></pre></div>\n<p>Now we need to call these functions from our routing method and send the file\nas response.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/file/&lt;file_name>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_file</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fake_df <span class=\"token operator\">=</span> generate_fake_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    generated_file <span class=\"token operator\">=</span> generate_csv_file<span class=\"token punctuation\">(</span>fake_df<span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>generated_file<span class=\"token punctuation\">,</span> mimetype<span class=\"token operator\">=</span><span class=\"token string\">\"text/csv\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># add a filename</span>\n    response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"Content-Disposition\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"attachment\"</span><span class=\"token punctuation\">,</span> filename<span class=\"token operator\">=</span><span class=\"token string\">\"{0}.csv\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response</code></pre></div>\n<p>Once we hit the above route with a file name the browser will ask for\npermission to download the csv file.</p>\n<p>Here is the full source code with a working example.</p>\n<div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\">\n  <iframe\n    src=\"https://glitch.com/embed/#!/embed/bubble-curio?path=server.py&previewSize=0\"\n    title=\"exclusive-sneezeweed on Glitch\"\n    style=\"height: 100%; width: 100%; border: 0;\">\n  </iframe>\n</div>\n<p>Feel free to edit and play around. Adios!</p>","frontmatter":{"date":"October 05, 2019","path":"/blog/generate-and-serve-files-from-flask","title":"Generate and serve files from flask"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}