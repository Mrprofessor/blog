{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/nav/Nav.js","webpack:///./src/components/layout/Layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/blogList/Bloglist.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_blogList_Bloglist__WEBPACK_IMPORTED_MODULE_1__","_components_layout_Layout__WEBPACK_IMPORTED_MODULE_2__","Blog","_ref","data","a","createElement","allMarkdownRemark","edges","list","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","Nav","react_default","gatsby_browser_entry","to","Layout","className","site","siteMetadata","title","nav_Nav","_3978990474","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","moment__WEBPACK_IMPORTED_MODULE_1__","moment__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","BlogList","map","blog","key","node","id","frontmatter","path","date","moment","format"],"mappings":"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","file":"component---src-pages-blog-js-6daecae15783c6748c2b.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport BlogList from \"./../components/blogList/Bloglist\";\nimport Layout from \"./../components/layout/Layout\";\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { frontmatter: { publish: { eq: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n            path\n            publish\n          }\n          id\n        }\n      }\n    }\n  }\n`;\n\nconst Blog = ({ data }) => {\n  return (\n    <Layout>\n      <div>\n        {data.allMarkdownRemark.edges && (\n          <BlogList list={data.allMarkdownRemark.edges} />\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default Blog;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst Nav = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/about/\">/about</Link>\n        </li>\n        <li>\n          <Link to=\"/blog/\">/resume</Link>\n        </li>\n        <li>\n          <Link to=\"/projects/\">/projects</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport Nav from \"../nav/Nav\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport { Link } from \"gatsby\";\n\n//export const siteQuery = graphql`\n//query {\n//site {\n//siteMetadata {\n//title\n//description\n//}\n//}\n//}\n//`;\n\nconst Layout = props => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n    render={data => (\n      <div className=\"layout\">\n        <div className=\"title-wrapper\">\n          <Link to=\"/\">\n            <h2 className=\"title\">{data.site.siteMetadata.title}</h2>\n          </Link>\n          <Nav />\n        </div>\n        {props.children}\n      </div>\n    )}\n  />\n);\n\nexport default Layout;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Link } from \"gatsby\";\n\nconst BlogList = ({ list }) => {\n  const computeDate = date => moment(date).format(\"Do MMMM, YYYY\");\n\n  return (\n    <div className=\"blog-list\">\n      {list.map(blog => {\n        return (\n          <article key={blog.node.id} className=\"list-item\">\n            <Link to={blog.node.frontmatter.path}>\n              {blog.node.frontmatter.title}\n            </Link>\n            <span>{computeDate(blog.node.frontmatter.date)}</span>\n          </article>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default BlogList;\n\n//<ul>\n//{list.map(blog => {\n//return (\n//<li key={blog.node.id}>\n//<Link to={blog.node.frontmatter.path}>\n//{blog.node.frontmatter.title}\n//</Link>\n//</li>\n//);\n//})}\n//</ul>\n"],"sourceRoot":""}