{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/building-a-github-auth-service/","result":{"data":{"markdownRemark":{"id":"df32d12a-480b-5070-bb06-7cb33f05786c","html":"<p>Recently I was building a GitHub OAuth app to authentiacate one my client-side application with GitHub. The application was all about taking notes and maintaining them on a private repository. I have had worked on such an architecture in one of my previous jobs where we have used <a href=\"https://aws.amazon.com/codecommit/\" target=\"_blank\" rel=\"nofollow\">AWS CodeCommit</a> as an inventory of resources where the history and the changes were easier to maintain. So for me GitHub was the perfect choice as a free storage with elegant history/commit management.</p>\n<p>Like most OAuth process it was not so straightforward even though at first glance it seemed so.</p>\n<h3><strong>The GitHub OAuth process</strong></h3>\n<p>After going through the GitHub's <a href=\"https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/\" target=\"_blank\" rel=\"nofollow\">guid</a> and a bunch of other development blogs I came up with a set of steps.</p>\n<ol>\n<li>First we need to create an OAuth application. The steps to create one are mentioned <a href=\"https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/\" target=\"_blank\" rel=\"nofollow\">here</a>.</li>\n<li>\n<p>Once we create an OAuth application, we need to call the GitHub API for an authentication code. This API call looks something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://github.com/login/oauth/authorize?client_id=0000000000000&amp;scope=repo&amp;redirect_uri=https://xyz.io/myapp/</code></pre></div>\n<p>This redirects to the redirect_uri with an authentication code which looks something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://xyz.io/myapp/?code=a17ccd77d36b2be92aa4</code></pre></div>\n</li>\n<li>\n<p>After getting the code, we need to make a POST call to get the access_token.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  <span class=\"token function\">curl</span> --location --request POST <span class=\"token string\">'https://github.com/login/oauth/access_token'</span> <span class=\"token punctuation\">\\</span>\n  --header <span class=\"token string\">'Cookie: _octo=GH1.1.206637387.1578955864; logged_in=no'</span> <span class=\"token punctuation\">\\</span>\n  --form <span class=\"token string\">'client_id=xxxxxxxxxxxxxx'</span> <span class=\"token punctuation\">\\</span>\n  --form <span class=\"token string\">'client_secret=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span> <span class=\"token punctuation\">\\</span>\n  --form <span class=\"token string\">'code=a17ccd77d36b2be92aa4'</span></code></pre></div>\n</li>\n<li>\n<p>Once we have the access_token we can start making call to GitHub and interact with repositories. Here is an example to get the current user details.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Authorization: 2434543442242394sfes34dds\"</span> https://api.github.com/user</code></pre></div>\n</li>\n</ol>\n<blockquote>\n<p>Follow the official <a href=\"https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\" target=\"_blank\" rel=\"nofollow\">web-application-flow</a> guide for more details and all possible parameters of the authentication APIs.</p>\n</blockquote>\n<h3><strong>Why do we need a back-end server</strong></h3>\n<p>Now with the above four steps it does look simple, doesn't it?</p>\n<p>Well no! We really don't want to reveal our client secret to a possible attacker, who in turn can get access to all the users and possibly their repositories who had authorized this OAuth application. There is no safer way to make the 3rd step from a client-side application without revealing the client secret.</p>\n<p>To securely call the POST API we need a back-end proxy where we can store the client secret and make the call. The proxy could be an old fashioned server as well as a serverless function hosted on a cloud provider.</p>\n<h3><strong>The proxy</strong></h3>\n<p>We will be needing only one GET API on the proxy/server to authenticate our client-side application. We will pre-configure our proxy/server with client id and client secret and will accept the authentication code as a parameter for the API.</p>\n<p>The API call to the proxy/server should look something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://your-proxy.glitch.me/authenticate/a17ccd77d36b2be92aa4</code></pre></div>\n<p>Here we are using Python and Flask to build the server, but it can be any stack of your choice.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/authenticate/&lt;code>\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      creds <span class=\"token operator\">=</span> get_access_token<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>build_config<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>creds<span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">build_config</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      url <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"oauth_url\"</span><span class=\"token punctuation\">]</span>\n      headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">}</span>\n      payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"client_id\"</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"oauth_client_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"client_secret\"</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"oauth_client_secret\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> code<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\"># Raise exceptions if client_id or client_secret not found.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> payload<span class=\"token punctuation\">[</span><span class=\"token string\">\"client_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">raise</span> APIException<span class=\"token punctuation\">(</span><span class=\"token string\">\"Client Id is not found in environment\"</span><span class=\"token punctuation\">,</span> status_code<span class=\"token operator\">=</span><span class=\"token number\">422</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> payload<span class=\"token punctuation\">[</span><span class=\"token string\">\"client_secret\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">raise</span> APIException<span class=\"token punctuation\">(</span><span class=\"token string\">\"Client secret is not found in environment\"</span><span class=\"token punctuation\">,</span> status_code<span class=\"token operator\">=</span><span class=\"token number\">422</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> payload\n\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get_access_token</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># If client id not found</span>\n      <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>text <span class=\"token operator\">==</span> <span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">raise</span> APIException<span class=\"token punctuation\">(</span><span class=\"token string\">\"Client id is invalid\"</span><span class=\"token punctuation\">,</span> status_code<span class=\"token operator\">=</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n      qs <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>parse_qsl<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      creds <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">:</span> qs<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> qs<span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> creds</code></pre></div>\n<p>Here we are storing the client id and client secret as environment variable and using them to build the required parameters for the POST call. We are also wrapping the default error message with a more sophisticated one.</p>\n<h3><strong>Conclusion</strong></h3>\n<p>This kind of design is pretty common with most OAuth authentication processes. Here for hosting I have used <a href=\"https://glitch.com/\" target=\"_blank\" rel=\"nofollow\">Glitch</a> as it is free and easy to maintain. If you are expecting an high volume of requests, a more serious server would be a better choice.</p>\n<p>The complete source code can be found <a href=\"https://github.com/solitudenote/gitkeeper\" target=\"_blank\" rel=\"nofollow\">here</a>. Feel free to fork and play around. Adios.</p>","frontmatter":{"date":"April 11, 2020","path":"/post/building-a-github-auth-service/","title":"Building a GitHub authentication service"}}},"pageContext":{}}}