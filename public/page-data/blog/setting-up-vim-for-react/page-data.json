{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/setting-up-vim-for-react","webpackCompilationHash":"08ecc95899ba36e48317","result":{"data":{"markdownRemark":{"html":"<p>It's been 8 months since I have been using (neo)vim as my primary text editor.\nInitially it was incredibly tough to adopt and use it in work. Well that would\nbe another story to tell.</p>\n<p>Back then I was working mostly in backend using <a href=\"https://coffeescript.org/\">CoffeeScript</a>\n(I know ðŸ™ˆ). VS Code had a little support for CoffeeScript so I didn't had any\nproblems using vim full time.</p>\n<p>But things changed drastically when I moved into UI development this year. I had\nto spend hours reading blogs, threads on reddit to create at least a workable\nsetup for a hassle-less React enviornment. Here I am sharing my vim setup for\nJS/React development.</p>\n<blockquote>\n<p>Note: I am using <a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a> for plugin\nmanagement.</p>\n</blockquote>\n<h3>Syntax Highlighting</h3>\n<p>Out of the box vim/nvim supports syntax highlighting for major programming\nlanguages.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /usr/share/vim/vim80/syntax/</code></pre></div>\n<p>But It is yet to add <code class=\"language-text\">jsx</code> to its inventory. Also there are some javascript\nspecific plugins that makes syntax highlighting much better.</p>\n<p><a href=\"https://github.com/mxw/vim-jsx\">vim-jsx</a> is by far the best jsx plugin for vim.\n<a href=\"https://github.com/pangloss/vim-javascript\">vim-javascript</a> provides better\nsyntax highlighting and code folding support compared to the default one.</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\">Plugin <span class=\"token string\">'mxw/vim-jsx'</span>\nPlugin <span class=\"token string\">'pangloss/vim-javascript'</span></code></pre></div>\n<h3>Linters and Formatters</h3>\n<p>Well everyone has a love hate relationship with linters. Nobody likes those\nannoying red lines on the editor the moment they add a newline.</p>\n<p>But with vim You are in luck. <a href=\"https://github.com/w0rp/ale\">ALE</a> is a nice\nplugin that asynchronously checks for syntatical errors in the code. It supports\nmnay language specific linters and formatters. ALE also lets people configure\nthe signs for errors and warnings.</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\">Plugin <span class=\"token string\">'w0rp/ale'</span></code></pre></div>\n<p>For JS/React development to add <code class=\"language-text\">eslint</code> as a linter and <code class=\"language-text\">prettier</code> I added\nthis to my vimrc</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ale_linters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  \\ <span class=\"token string\">'javascript'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eslint'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  \\<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ale_fixers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  \\ <span class=\"token string\">'javascript'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prettier'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">]</span>\n  \\ <span class=\"token punctuation\">}</span></code></pre></div>\n<p>I also mapped <code class=\"language-text\">leader+d</code> as my ale fixer and configured to format each time I\nsave the file.</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ale_fix_on_save <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nnmap <span class=\"token operator\">&lt;</span>leader<span class=\"token operator\">></span><span class=\"token keyword\">d</span> <span class=\"token operator\">&lt;</span>Plug<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ale_fix<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Autocompletion</h3>\n<p>Auto completion in vim is not as good as any modern IDE but <a href=\"https://github.com/Shougo/deoplete.nvim\">Deoplete</a>\nis worth taking a look.</p>\n<p>Check the <a href=\"https://github.com/Shougo/deoplete.nvim#install\">repo</a> for\ninstallation guides.</p>\n<h3>Commenting</h3>\n<p>Though this is not specific to any particular language I would like to discuss\nan excellent plugin which is pretty good at commenting and uncommenting code.\n<a href=\"https://github.com/scrooloose/nerdcommenter\">NerdCommenter</a> definitely going\nto save you a few additional key-presses a day and being a vimmer is all about\nthat.</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\">Plugin <span class=\"token string\">'scrooloose/nerdcommenter'</span></code></pre></div>\n<h3>conclusion</h3>\n<p>With vim it's hard to find an universal config that suits everyone. It's always\nsolving one problem at a time that led me here. This is definitely not a full\nfledge solution to this but it seems to work pretty well for me. So if you have\nany suggestion feel free to ping me on <a href=\"https://twitter.com/ThisIsRudra\">Twitter</a>.</p>\n<p>My full vim setup can be found <a href=\"https://github.com/mrprofessor/dotfiles/blob/master/.vimrc\">here</a>.</p>","frontmatter":{"date":"May 03, 2019","path":"/blog/setting-up-vim-for-react","title":"Setting up (Neo)vim for React development"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}